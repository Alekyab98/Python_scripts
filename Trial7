import csv
import subprocess
import json
from time import strftime, localtime

# File containing KPI names and full curl commands
input_file = 'kpi_curlcmd.txt'

# Function to convert epoch time to a readable timestamp
def convert_epoch_to_timestamp(value):
    return strftime('%Y-%m-%d %H:%M:%S', localtime(int(value)))

# Function to execute the curl command and return the response
def execute_curl_and_get_data(curl_command):
    bash_command = f'bash -c "{curl_command}"'
    print(f"Executing bash curl command: {bash_command}")
    result = subprocess.run(bash_command, shell=True, capture_output=True, text=True)

    # Print the response for debugging
    print(f"Full Curl response:\n{result.stdout}\n")

    if result.returncode != 0:
        print(f"Error executing curl command: {result.stderr}")
        return None  # Return None if curl failed

    return result.stdout

# Function to create a CSV file for each KPI
def create_csv_for_kpi(kpi_name, curl_command):
    # Execute the curl command and get the response data
    response_data = execute_curl_and_get_data(curl_command)
    
    # Check if we got a valid response
    if response_data is None:
        print(f"Skipping CSV creation for {kpi_name} due to curl command failure.")
        return

    # Parse the JSON response
    try:
        json_data = json.loads(response_data)
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON for {kpi_name}: {e}")
        return  # Skip CSV creation if parsing fails

    # List to store data for CSV
    value_list = []

    # Extract data from the JSON structure
    if json_data['status'] == 'success':
        for result in json_data['data']['result']:
            fqdn = result['metric'].get('kubernetes_namespace', 'default')  # Extract the 'fqdn' field
            for v in result['values']:
                event_time = convert_epoch_to_timestamp(v[0])  # Convert epoch time to human-readable format
                metric_value = v[1]  # Metric value from the response
                value_list.append({
                    "fqdn": fqdn,
                    "metric_value": metric_value,
                    "event_time": event_time,
                    "metric_name": kpi_name
                })
    else:
        print(f"Query did not succeed for {kpi_name}. Status: {json_data['status']}")
        return

    # Create CSV file named after the KPI
    csv_filename = f'{kpi_name}.csv'

    # Write the data to a CSV file
    with open(csv_filename, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=["fqdn", "metric_value", "event_time", "metric_name"])
        writer.writeheader()
        writer.writerows(value_list)
    
    print(f'CSV file created for {kpi_name}: {csv_filename}')

# Read the input text file and process each line
with open(input_file, 'r') as file:
    for line in file:
        # Split the line by '|' to get KPI name and full curl command
        kpi_name, curl_command = line.strip().split('|')

        # Create CSV for each KPI
        create_csv_for_kpi(kpi_name, curl_command)

print("CSV files created for all KPIs.")
